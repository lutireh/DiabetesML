# -*- coding: utf-8 -*-
"""DiabetesML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1luye2zi6LYKSZlJDM7RT9uou4V2Btacj
"""

import pandas as pd

import matplotlib.pyplot as plt

!pip install ucimlrepo
!pip install scikit-learn-intelex
!pip install catboost

from ucimlrepo import fetch_ucirepo

diabetes_130_us_hospitals_for_years_1999_2008 = fetch_ucirepo(id=296)

X = diabetes_130_us_hospitals_for_years_1999_2008.data.features
y = diabetes_130_us_hospitals_for_years_1999_2008.data.targets

print(diabetes_130_us_hospitals_for_years_1999_2008.metadata)

data = pd.read_csv("https://archive.ics.uci.edu/static/public/296/data.csv")

data.head()

data.diag_1.unique()

"""Limpando os dados"""

data.weight.unique()
most_frequent = data['weight'].mode()[0]
data['weight'].fillna(most_frequent, inplace=True)

from sklearn.preprocessing import OneHotEncoder

encoder = OneHotEncoder()

matrix = encoder.fit_transform(data[['gender']]).toarray()
column_names = ["gender - Female","gender - Male", "gender - Unknown/Invalid"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['race']]).toarray()
column_names = ["race - Caucasian","race - AfricanAmerican", "race - NaN" ,"race - Other", "race - Asian","race - Hispanic"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['weight']]).toarray()
column_names = ["weight - [0-25)","weight - [25-50)", "weight - [50-75)" ,"weight - [75-100)", "weight - [100-125)","weight - [125-150)","weight - [150-175)","weight - [175-200)","weight - >200" ]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]


matrix = encoder.fit_transform(data[['age']]).toarray()
column_names = ["age - [0-10)","age -[10-20)", "age -[20-30)" ,"age -[30-40)", "age -[40-50)","age -[50-60)","age -[60-70)","age -[70-80)","age -[80-90)","age -[90-100)"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['max_glu_serum']]).toarray()
column_names = ["max_glu_serum - >300","max_glu_serum - Norm", "max_glu_serum - >200" ,"max_glu_serum - NaN"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['A1Cresult']]).toarray()
column_names = ["A1Cresult - >7","A1Cresult - Norm", "A1Cresult - >8" ,"A1Cresult - NaN"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['metformin']]).toarray()
column_names = ["metformin - No","metformin - Steady", "metformin - Up" ,"metformin - Down"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['repaglinide']]).toarray()
column_names = ["repaglinide - No","repaglinide - Steady", "repaglinide - Up" ,"repaglinide - Down"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['nateglinide']]).toarray()
column_names = ["nateglinide - No","nateglinide - Steady", "nateglinide - Up" ,"nateglinide - Down"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['chlorpropamide']]).toarray()
column_names = ["chlorpropamide - No","chlorpropamide - Steady", "chlorpropamide - Up" ,"chlorpropamide - Down"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['glimepiride']]).toarray()
column_names = ["glimepiride - No","glimepiride - Steady", "glimepiride - Up" ,"glimepiride - Down"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['acetohexamide']]).toarray()
column_names = ["acetohexamide - No","acetohexamide - Steady", "acetohexamide - Up" ,"acetohexamide - Down"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['glipizide']]).toarray()
column_names = ["glipizide - No","glipizide - Steady", "glipizide - Up" ,"glipizide - Down"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['glyburide']]).toarray()
column_names = ["glyburide - No","glyburide - Steady", "glyburide - Up" ,"glyburide - Down"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['tolbutamide']]).toarray()
column_names = ["tolbutamide - No","tolbutamide - Steady", "tolbutamide - Up" ,"tolbutamide - Down"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['pioglitazone']]).toarray()
column_names = ["pioglitazone - No","pioglitazone - Steady", "pioglitazone - Up" ,"pioglitazone - Down"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['rosiglitazone']]).toarray()
column_names = ["rosiglitazone - No","rosiglitazone - Steady", "rosiglitazone - Up" ,"rosiglitazone - Down"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['acarbose']]).toarray()
column_names = ["acarbose - No","acarbose - Steady", "acarbose - Up" ,"acarbose - Down"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['miglitol']]).toarray()
column_names = ["miglitol - No","miglitol - Steady", "miglitol - Up" ,"miglitol - Down"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['troglitazone']]).toarray()
column_names = ["troglitazone - No","troglitazone - Steady", "troglitazone - Up" ,"troglitazone - Down"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['tolazamide']]).toarray()
column_names = ["tolazamide - No","tolazamide - Steady", "tolazamide - Up" ,"tolazamide - Down"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['examide']]).toarray()
column_names = ["examide - No","examide - Steady", "examide - Up" ,"examide - Down"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['citoglipton']]).toarray()
column_names = ["citoglipton - No","citoglipton - Steady", "citoglipton - Up" ,"citoglipton - Down"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['insulin']]).toarray()
column_names = ["insulin - No","insulin - Steady", "insulin - Up" ,"insulin - Down"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['glyburide-metformin']]).toarray()
column_names = ["glyburide-metformin - No","glyburide-metformin - Steady", "glyburide-metformin - Up" ,"glyburide-metformin - Down"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['glipizide-metformin']]).toarray()
column_names = ["glipizide-metformin - No","glipizide-metformin - Steady", "glipizide-metformin - Up" ,"glipizide-metformin - Down"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['glimepiride-pioglitazone']]).toarray()
column_names = ["glimepiride-pioglitazone - No","glimepiride-pioglitazone - Steady", "glimepiride-pioglitazone - Up" ,"glimepiride-pioglitazone - Down"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['metformin-rosiglitazone']]).toarray()
column_names = ["metformin-rosiglitazone - No","metformin-rosiglitazone - Steady", "metformin-rosiglitazone - Up" ,"metformin-rosiglitazone - Down"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['metformin-pioglitazone']]).toarray()
column_names = ["Metformin-pioglitazone - No","metformin-pioglitazone - Steady", "metformin-pioglitazone - Up" ,"metformin-pioglitazone - Down"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['diabetesMed']]).toarray()
column_names = ["diabetesMed - No","diabetesMed - Yes"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

matrix = encoder.fit_transform(data[['change']]).toarray()
column_names = ["change - No","change - Ch"]

for i in range(len(matrix.T)):
  data[column_names[i]] = matrix.T[i]

data['readmitted_binary'] = data['readmitted'].map({'NO': 0, '>30': 1, '<30': 1})
data['readmitted'] = data['readmitted_binary']
data.drop('readmitted_binary', axis=1, inplace=True)

data.shape

data.columns

data.drop('payer_code', axis = 1, inplace=True)
data.drop('diag_1', axis = 1, inplace=True)
data.drop('diag_2', axis = 1, inplace=True)
data.drop('diag_3', axis = 1, inplace=True)
data.drop('change', axis = 1, inplace=True)
data.drop('patient_nbr', axis = 1, inplace=True)
data.drop('admission_type_id', axis = 1, inplace=True)
data.drop('discharge_disposition_id', axis = 1, inplace=True)
data.drop('admission_source_id', axis = 1, inplace=True)
data.drop('gender', axis = 1, inplace=True)
data.drop('weight', axis = 1, inplace=True)
data.drop('race', axis = 1, inplace=True)
data.drop('age', axis = 1, inplace=True)
data.drop('max_glu_serum', axis = 1, inplace=True)
data.drop('A1Cresult', axis = 1, inplace=True)
data.drop('metformin', axis = 1, inplace=True)
data.drop('repaglinide', axis = 1, inplace=True)
data.drop('nateglinide', axis = 1, inplace=True)
data.drop('chlorpropamide', axis = 1, inplace=True)
data.drop('glimepiride', axis = 1, inplace=True)
data.drop('acetohexamide', axis = 1, inplace=True)
data.drop('glipizide', axis = 1, inplace=True)
data.drop('glyburide', axis = 1, inplace=True)
data.drop('tolbutamide', axis = 1, inplace=True)
data.drop('pioglitazone', axis = 1, inplace=True)
data.drop('rosiglitazone', axis = 1, inplace=True)
data.drop('acarbose', axis = 1, inplace=True)
data.drop('miglitol', axis = 1, inplace=True)
data.drop('troglitazone', axis = 1, inplace=True)
data.drop('tolazamide', axis = 1, inplace=True)
data.drop('examide', axis = 1, inplace=True)
data.drop('citoglipton', axis = 1, inplace=True)
data.drop('insulin', axis = 1, inplace=True)
data.drop('glyburide-metformin', axis = 1, inplace=True)
data.drop('glipizide-metformin', axis = 1, inplace=True)
data.drop('glimepiride-pioglitazone', axis = 1, inplace=True)
data.drop('metformin-rosiglitazone', axis = 1, inplace=True)
data.drop('metformin-pioglitazone', axis = 1, inplace=True)
data.drop('medical_specialty', axis = 1, inplace=True)
data.drop('diabetesMed', axis = 1, inplace=True)
data.dropna(subset=['readmitted'], inplace=True)

data.shape

data.columns

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, data.readmitted, test_size=0.3, random_state=42)

object_columns = data.select_dtypes(include=['object']).columns
object_data = data[object_columns]
object_data.info()

data.info()

import numpy as np
from scipy import stats

import seaborn as sns

# sns.boxplot(data.age)

# plt.figure(figsize=(10, 6))
# sns.histplot(data=data.age)
# plt.title('Distribuição de idade')
# plt.xlabel('Idade do paciente')
# plt.ylabel('Número de registros')
# plt.grid(True)

# data.groupby('gender').mean(numeric_only=True)

# data.time_in_hospital.mean()

# fig, ax = plt.subplots(figsize=(10,7))
# data.corr(numeric_only=True)
# data_without_id = data.drop(['encounter_id'], axis = 1)
# sns.heatmap(data_without_id.corr(numeric_only=True), annot=True,  linewidths=5, ax = ax)

"""Explorar relação dos medicamentos mais receitados
Explorar as features: number_outpatient, number_emergency e number_inpatient
Explorar o time_in_hospital
"""

# data.describe()

# data.readmitted.unique()

# sns.boxplot(x=data.readmitted, y =data.age , palette='rainbow')
# plt.title('Distribuição de readmissão hospitalar por idade')
# plt.xlabel('Readmissão hospitalar')
# plt.ylabel('Distribuição de idade')
# plt.show()

# sns.violinplot(data = data, x = 'readmitted', y = 'age')

# sns.histplot(data = data, x = 'readmitted', y = 'age')

# plt.figure(figsize=(10, 6))
# sns.boxplot(data = data, x = 'age', y = 'time_in_hospital')
# plt.title('Distribuição de tempo no hospital por idade')
# plt.ylabel('Tempo no hospital')
# plt.xlabel('Distribuição de idade')

# plt.figure(figsize=(10, 6))
# sns.boxplot(data = data, x = 'readmitted', y = 'max_glu_serum')
# plt.title('Distribuição de tempo no hospital por idade')
# plt.ylabel('Tempo no hospital')
# plt.xlabel('Peso')

# sns.histplot(data = data, x = 'max_glu_serum', y = 'age')

# data.max_glu_serum.unique()

# plt.figure(figsize=(10, 6))
# sns.boxplot(data = data, x = 'age', y = 'max_glu_serum')
# plt.title('Nível máximo de glicose por idade')
# plt.ylabel('Nível máximo de glicose')
# plt.xlabel('Distribuição de idade')

# # sns.histplot(data.age, log_scale = 15)
# plt.figure(figsize=(10, 6))
# sns.histplot(data=data.max_glu_serum)
# plt.title('Instâncias por nível máximo de glucose')
# plt.xlabel('Número máximo de glucose')
# plt.ylabel('Número de registros')
# plt.grid(True)

# sns.boxplot(data= data, x= 'gender', y=  data.readmitted)

# data.head()

# sns.set_style('whitegrid')
# sns.set_palette('Set2')
# contagem = data['readmitted'].value_counts()
# plt.pie(x= contagem, labels = contagem.index, autopct='%1.1f%%')
# plt.show()

# sns.set_style('whitegrid')
# sns.set_palette('Set2')
# contagem = data['insulin'].value_counts()
# plt.pie(x= contagem, labels = contagem.index, autopct='%1.1f%%')
# plt.show()

# sns.set_style('whitegrid')
# sns.set_palette('Set2')
# contagem = data['diabetesMed'].value_counts()
# plt.pie(x= contagem, labels = contagem.index, autopct='%1.1f%%')
# plt.show()

# plt.figure(figsize=(10, 6))
# sns.lineplot(x = data.time_in_hospital, y = data.num_lab_procedures + data.num_procedures)
# plt.xlabel("Tempo no hospital")
# plt.ylabel("Quantidade de exames")
# plt.show()

# plt.figure(figsize=(10, 6))
# sns.lineplot(x = data.age, y = data.num_lab_procedures + data.num_procedures)
# plt.xlabel("Idade")
# plt.ylabel("Quantidade de exames")
# plt.show()

# sns.lineplot(x = data.time_in_hospital, y = data.number_inpatient)
# # data.number_outpatient + data.number_emergency + data.number_inpatient
# plt.xlabel("Tempo no hospital")
# plt.ylabel("Quantidade de procedimentos")
# plt.show()

# sns.histplot(data=data.number_emergency, binrange=(0, 10))
# plt.title('Distribuição de idade')
# plt.xlabel('Idade do paciente')
# plt.ylabel('Número de registros')

# sns.lineplot(y = data.age, x = data.readmitted)
# plt.xlabel("Tempo no hospital")
# plt.ylabel("Quantidade de procedimentos")
# plt.show()

# data.number_inpatient.unique()

from sklearn.preprocessing import StandardScaler
from sklearn.metrics import roc_auc_score, roc_curve
from sklearn.metrics import recall_score

x = data.drop('readmitted', axis = 1)
y = data.readmitted

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)

from sklearn.metrics import f1_score

from sklearn.model_selection import train_test_split
from sklearn.svm import SVR
from sklearn.metrics import accuracy_score, classification_report, mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer

# Criar o modelo SVR # Changed to SVR
modeloSVR = SVR(kernel='linear', C=1)  # 'kernel' e 'C' podem ser ajustados

# Treinar o modelo
X_train_subset = X_train.sample(frac=0.50, random_state=42)
y_train_subset = y_train.sample(frac=0.50, random_state=42)

modeloSVR.fit(X_train_subset, y_train_subset)

y_pred_modeloSVR = modeloSVR.predict(X_test)

acuraciSVR = accuracy_score(y_test, y_pred_modeloSVR)
print(f"Acurácia: {acuraciSVR}")

recallSVR = recall_score(y_test, y_pred_modeloSVR)
print(f"Recall do modelo SVR: {recallSVR}")

precisaoSVR = precision_score(y_test, y_pred_modeloSVR)  # Para problemas de classificação binária
print(f"Precisão: {precisaoSVR}")

f1SVR = f1_score(y_test, y_pred_modeloSVR)
print(f"F1-score do modelo SVR: {f1SVR}")



auc_svr = roc_auc_score(y_test, modeloSVR.predict_proba(X_test)[:, 1])
print(f"AUC ROC do SVR: {auc_svr}")

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, precision_score


modeloDecisionTree = DecisionTreeClassifier()
modeloDecisionTree.fit(X_train, y_train)
y_pred_modeloDecisionTree = y_pred = modeloDecisionTree.predict(X_test)

acuracia = accuracy_score(y_test, y_pred_modeloDecisionTree)
print(f"Acurácia: {acuracia}")

recall = recall_score(y_test, y_pred_modeloDecisionTree)
print(f"Recall do modelo DecisionTree: {recall}")

precisao = precision_score(y_test, y_pred_modeloDecisionTree)  # Para problemas de classificação binária
print(f"Precisão: {precisao}")

f1DecisionTree = f1_score(y_test, y_pred_modeloDecisionTree)
print(f"F1-score do modelo DecisionTree: {f1DecisionTree}")

auc_decision_tree = roc_auc_score(y_test, modeloDecisionTree.predict_proba(X_test)[:, 1])
print(f"AUC ROC do DecisionTree: {auc_decision_tree}")

from sklearn.ensemble import RandomForestClassifier

modeloRandomForest = RandomForestClassifier()
modeloRandomForest.fit(X_train, y_train)
y_pred_modeloRandomForest = y_pred = modeloRandomForest.predict(X_test)

precisaoModeloRandomForest = precision_score(y_test, y_pred_modeloRandomForest)  # Para problemas de classificação binária
print(f"Precisão: {precisaoModeloRandomForest}")

recallRandomForest = recall_score(y_test, y_pred_modeloRandomForest)
print(f"Recall do modelo RandomForest: {recallRandomForest}")

acuraciaModeloRandomForest = accuracy_score(y_test, y_pred_modeloRandomForest)
print(f"Acurácia: {acuraciaModeloRandomForest}")

f1 = f1_score(y_test, y_pred_modeloRandomForest)
print(f"F1-score do modelo RandomForest: {f1}")

auc_random_forest = roc_auc_score(y_test, modeloRandomForest.predict_proba(X_test)[:, 1])
print(f"AUC ROC do RandomForest: {auc_random_forest}")

from sklearn.linear_model import LogisticRegression

modeloLogisticRegression = LogisticRegression()
modeloLogisticRegression.fit(X_train, y_train)
y_pred_modeloLogisticRegression = modeloLogisticRegression.predict(X_test)

acuraciaModeloLogisticRegression = accuracy_score(y_test, y_pred_modeloLogisticRegression)
print(f"Acurácia: {acuraciaModeloLogisticRegression}")

precisaoModeloLogisticRegression = precision_score(y_test, y_pred_modeloLogisticRegression)  # Para problemas de classificação binária
print(f"Precisão: {precisaoModeloLogisticRegression}")

recallLogisticRegression = recall_score(y_test, y_pred_modeloLogisticRegression)
print(f"Recall do modelo LogisticRegression: {recallLogisticRegression}")

f1LogisticRegression = f1_score(y_test, y_pred_modeloLogisticRegression)
print(f"F1-score do modelo LogisticRegression: {f1LogisticRegression}")

auc_logistic_regression = roc_auc_score(y_test, modeloLogisticRegression.predict_proba(X_test)[:, 1])
print(f"AUC ROC do LogisticRegression: {auc_logistic_regression}")

import numpy as np

binary_cols = [col for col in data.columns if data[col].isin([0, 1, np.nan]).all()]
print(f"Colunas Binárias: {binary_cols}")

# knn imputation em dados faltantes

from sklearn.impute import KNNImputer

# Selecionar apenas as colunas numéricas para a imputação KNN
numerical_features = data.select_dtypes(include=np.number)

# Criar um objeto KNNImputer
knn_imputer = KNNImputer(n_neighbors=5)

# Aplicar a imputação KNN às colunas numéricas
df_imputed = pd.DataFrame(knn_imputer.fit_transform(numerical_features), columns=numerical_features.columns)


# Substituir as colunas originais pelas colunas com valores imputados
data[numerical_features.columns] = df_imputed

# Verificar se ainda existem valores ausentes nas colunas numéricas
print(data[numerical_features.columns].isnull().sum())